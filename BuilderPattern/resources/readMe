Builder Pattern -

The idea behind the builder pattern is to separate the construction of the object from the data that it contains.
In other words, we would like the object to know as little as possible about how it is built and to only store
the data that it is supposed to. 

In the builder pattern, the creation of an object is managed by a "builder" who creates the objects on behalf of
the client. So instead of directly building the object, the client passes to the builder, the values that it 
wishes the object to have and the builder can then create the object with those values and fills in missing values with
defaults. 

It should be noted that the builder will only create the object when it is specifically told to do so through a
creation method in the builders interface that the client calls. This allows the builder to be completely setup 
with the appropriate values before the object is finally constructed and returned to the client. 

The builder pattern is similar to a factory where its main responsibility is to take a set of values to construct
an object with, however the main difference here is that the builder will not build the object unless it is 
told to do so, unlike a factory where the object is expected to be immediately returned. Another difference
between the builder pattern and a factory is that the builder pattern allows the client to pass in values in a 
step by step process if needed.

By delegating an objects construction to a builder rather than having multiple constructors or initialisers in
the object, we reduce the objects size to potentially only containing a single constructor with the rest of the
object only containing data preventing the problem of telescoping. Telescoping is where an object has numerous
constructors that dictate how it can be built.

When to use -

- A builder pattern should be used when we wish to separate the construction of a complex object from the data
  that is contains.  
 
- A builder pattern should be used when we have many different ways of creating an object that result in a number of
  constructors being created due to cater for each construction path. 
  
Basic Structure -

There are 4 main parts of the builder pattern.

1. Builder (Interface)

- The builder defines the abstract interface that allows the director/client to create parts of a "product" object.
- The builder interface provides the means for a director/client to interact with the concrete builder. 
- The builder interface provides the methods to assemble and create the product object.

2. Concrete Builder

- The concrete builder implements the builder interface.
- The concrete builder assembles the parts of the product object through commands provided by the director/client.
- The concrete builder creates the product when instructed by the director/client. (usually after the parts are assembled).
- The concrete builder maintains the values that it is has been given by the director/client so it can create the product with the appropriate values.

3. Director

- The director passes values to the concrete builder so that it can assemble the product.
- The director requests the product from the concrete builder through the builder interface.
- The director acts on behalf of the client to create product objects.

4. Product 

- The product is the complex object that we want to create.
- The product's internal representation is populated by the concrete builder.

Benefits and Drawbacks

- The client/director does not know how the product object is created.
- If the product object is changed (new methods, interfaces), it also requires the builder to be updated.
- The builder can be used by different directors to construct objects in many ways without having to write multiple constructors.
- Greater control is given to the creation of objects since it is done through a specific request to the builder meaning that we
  cannot accidentally create an object.

Example - 

An example of the builder pattern in use is when we go to buy a car. When purchasing a car, there are many different extras that
we can come with it at an additional cost (i.e. GPS, Reverse Camera, Tinted Windows). This customisation is where the builder pattern
would be useful. 

From a programming perspective, to create this Car object with the different combination of extras would require different constructors
or the specific setting of default values (such as null) on the client side which could become messy. 
 
The combinations of extras could create a telescopic Car object which could become an issue if we start to provide additional extras in
the future. 

With the builder pattern, we can have the builder pass on default values to create the car if they are not specific by the client. This
results in the client not having to pass on unwanted values or even having to know how the objects constructed. All the client/director
has to do in this case is to pass on the values that it wishes the Car object to have to the builder and then request to have the Car
constructed and returned. 

For this purchasing car example, our builder pattern structures are as follows - 

- The builder interface will define the options that are available for a car (i.e. GPS, Reverse Camera, Tinted Windows).
- The builder interface will also provide a method to allow the director/client to request for the Car to be built.
- The concrete builder will be responsible for holding the values to create the Car with and to also build the Car on behalf of the director/client. 
- The director in this example would be the car salesman, relaying the instructions for the options that the client (customer) wants to have in their car.
- The product is the Car. 