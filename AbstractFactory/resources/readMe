Abstract Factory Pattern -

The purpose of an abstract factory pattern is provide a common interface for creating similar/related
objects without having to specify their concrete classes. 

The result of this is that the client can use the interface to reference any number of similar factories
(factories that implement the abstract interface) to create objects without having to know what the 
specific type of the object is. This allows for a generic approach to creating objects, the client can
subsequently cast the returned object to a specific type of need be.

When to use -

- An abstract factory can be used when the client isn't concerned as to how the objects (products) are
  created, composed or represented. 
  
- An abstract factory can be used when the system is required to be configurable. Abstract factories are
  useful because the factories can be interchanged without affecting client code since the interfaces will
  still be the same. An example of this is cross platform look and feel (Windows, Unix) where the individual
  factories (Windows, Unix) will provide specific implementation for their shared interface (abstract factory
  interface). Depending on the OS that is used, we use the respective factory.
  
- An abstract factory can be used when we have a group of factories that provide the same functionality but
  we want to hide this knowledge from the client. All the client expects is that they make a call to the 
  abstract factory interface and the correct object is returned, which factory provides it is not known to
  the client. 
  
- An abstract factory can be used when we want to provide the client with a wide number of classes/objects
  but wish to hide the internal implementation. We can achieve this through the abstract factory interface. 
  
Basic Structure - 

The structure of the abstract factory is made up of 5 components.

1. Abstract Factory 

- The abstract factory defines the common interface that will be implemented by all concrete factories
  that wish to provide similar behaviour to the client. 

- The abstract factory interface is utilised by the client to make calls to the concrete factories to
  create an object. 

2. Concrete Factory

- The concrete factory implements the abstract factory interface.

- The concrete factory provides the specific implementation that will be called when the client makes a
  function call through the abstract interface. 
  
   
3. Abstract Product

- The abstract product, like the abstract factory provides the common interface that will be implemented
  by all concrete products.
  
- The purpose of the abstract product interface is that it can allow all the abstract factories to return
  a generic type. If a client requires the concrete class, they can then cast it to the concrete product
  class.  
  
4. Concrete Product

- The concrete product implements the abstract product interface. 

- The concrete product provides the specific implementation for that product.  
  
5. Client

- The client will request for objects (products) to be created through the abstract factory interface.

- The client will receive the objects from the abstract factory as a abstract product (the interface type)
  rather than its concrete type. The reason for this is that we can then use different abstract factories
  to return objects (products) of different concrete types without the client even knowing. 

Benefits and Drawbacks -

1. Because we refer to the object (product) and the factory that created it through the abstracted interfaces,
   the client does not know anything about the concrete class or the factory that created it. This can be
   beneficial if we want to generically swap out factories and objects without affecting client code.
   
2. Having a client use a different factory is simple if we only refer to the factory through the abstract interface.
   To create different abstract products, all we would need to do is to swap out the factory that the client is 
   specifically referring to so long as it uses the same abstract factory interface.   
   
3. Having the factories implement a common interface ensures that we have consistent behaviour between factories that
   provide similar functionality. 
      
4. Extending functionality of a abstract factory would require updating the interface. As a consequence this will also
   force all other factories that use the updated interface to implement the functionality as well which may or may
   not be used.  
     
Implementation Tips -

1. Concrete factories should be singletons as there only should ever be a single instance of that particular factory. 

2. The abstract factory interface should only provide methods to create the abstract products. 

Example -

An example of an abstract factory pattern would be the creation of cars from different manufacturers (companies). These 
manufacturers share a common behaviour in that they all will create cars. Whilst the manufacturers might be all doing 
the same thing (creating cars), how they do it might vary. 

This also applies to the cars that each manufacturer will create. Whilst the manufacturers will all create cars of some
form, the exact specification of the car is up to the manufacturer to decide. 

As a client you shouldn't be concerned as to where the manufacturer is located, you should be able to simply state the
car that you want, and the correct one should be created for you.

Listed below is how the pattern applies to this example -

- The abstract factory represents what the manufacturers are to do (i.e. create a car).

- The concrete factory is the individual manufacturer (Ferrari, Mercedes, Red Bull) that will contain specific 
  implementation for creating their own cars.
  
- The abstract product is the common type of car that will be created by each of the manufacturers (Formula 1 Car,
  Sports Car, Prototype Car). The abstract product defines what type of product each of the manufacturers will create.
  
- The concrete product is the specific type of car that is created by each manufacturer.

- The client will be provided different abstract factories that will create different types of cars for them depending
  on the factory that has been assigned.