Composite Design Pattern - 

The idea behind the composite pattern is to treat a group of objects (a composition) in the same way as we would treat
a single instance of the object. The composed object should adhere to a tree like structure so it represents a hierarchy.

A composite is describing an object that is "made up of" similar types of objects. 

When to use -

- The composite pattern should be used when a client doesn't really care about the difference between a composed object and an individual one.

- The composite pattern should be used if we find ourselves handling multiple objects that behave the same and have identical code. 

Basic Structure -

There are three main parts to the composite design pattern. 

1. Component (Interface)

- The component is the interface that both leaves (individual) and composed objects inherit and implement.
- The component can provide methods in its interface to allow objects to access its parent, however this is redundant on leaf objects.

2. Leaf
- The leaf represents an individual object.
- The leaf can also be seen as a composite, but is only composed of a single object.
- The leaf implements all the methods of the component interface.

3. Composite
- The composite is basically a leaf but has children.
- The composite implements all the method of the component interface.
- The composite provides additional methods to manipulate its children (add, remove, get)
- The composite can delegate the component methods to all its children.  

Example -

An example of a composite pattern would be a computer.
- A computer is comprised of a bunch of different parts which when added together form the basis of a computer.
- Each computer part can represent a leaf, the composite can then be a group of these leaves that form a particular 
  component of the computer (i.e - motherboard and hard drive).
- These components can then be again grouped together to form the entire computer.
- The computer represents the hierarchy which is the representation of the composite pattern. 