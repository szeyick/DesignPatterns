Composite Design Pattern - 

The aim of the composite pattern is to treat a group of objects in the same way as a single instance of the object. The
idea is to "compose" objects into a tree like structure so it represents a hierarchy. Through the composite pattern, clients
can treat groups of objects and individual objects as one and the same. 

In OOP, a composite is an object that is a "composition" of one or more similar objects that all have similar functionality. In
other words, it is "made up of" similar types of objects. 

When to use -

The composite pattern should be used when clients don't really care about the difference between a composed object and an individual one.

If you find yourself in a situation where you're handling multiple objects in the same way and those objects have identical code, then
we should consider using the composite pattern. 

Basic Structure -

There are three basic pieces to the composite design pattern. 

1. Component

- The component is the main part that defines the pattern.
- The component declares an interface that defines the common methods that will be inherited by an individual object or the composite.
- The component can also declare in its interface, methods to allow inheriting objects to access its parent in a composite structure.
- The main drawback for defining the link to the parent in the interface is that individual objects will also be required to implement,
  which being a single object, makes the method call redundant. 

2. Leaf
- The leaf represents an individual object.
- The leaf can also be seen as a composite, but is only composed of a single object.
- The leaf implements all the methods of the component interface.

3. Composite
- The composite is basically a leaf but has children.
- The composite implements all the method of the component interface.
- The composite provides additional methods to manipulate its children (add, remove, get)
- The composite can delegate the component methods to all its children.  

Example -

An example of a composite pattern would be a computer.
- A computer is comprised of a bunch of different parts which when added together form the basis of a computer.
- Each computer part can represent a leaf, the composite can then be a group of these leaves that form a particular 
  component of the computer (i.e - motherboard and hard drive).
- These components can then be again grouped together to form the entire computer.
- The computer represents the hierarchy which is the representation of the composite pattern. 